# Begin with machine configuration
- import_playbook: playbook_deploy_01_machine_setup.yml
# Add rbenv for ruby
- import_playbook: playbook_deploy_02_rbenv.yml
# Set up rbenv on both machines for the ubuntu user
- import_playbook: playbook_create_seas_deployer03_rbenv_ubuntu.yml
# Get bundler installed 
- import_playbook: playbook_create_seas_deployer04_bundler.yml
# Create the capistrano directory structure because NOT running the capistrano initial setup stage
- import_playbook: playbook_create_seas_deployer05_create_capistrano_directory_structure.yml
# Copy up the git ignored config files
- import_playbook: playbook_create_seas_deployer05_copy_git_ignored_configs.yml
# Install nginx onto any production boxes
- import_playbook: playbook_create_seas_deployer06_nginx_for_production.yml
# install users
- import_playbook: playbook_create_seas_deployer07_add_users_to_all_servers.yml
# install ssh keys for checkout 
- import_playbook: playbook_create_seas_deployer08_copy_ssh_keys.yml
# install codebase so we can run capistrano
- import_playbook: playbook_create_seas_deployer09_install_codebase.yml
# install the unicorn service
- import_playbook: playbook_create_seas_deployer09_install_unicorn_service.yml
# install the sidekiq service
- import_playbook: playbook_create_seas_deployer09_install_sidekiq_service.yml

# Run capistrano on the cap_deployer box to setup production
- import_playbook: playbook_create_seas_deployer10_run_capistrano.yml
# Run capistrano on the cap_deployer box to setup sidekiq
- import_playbook: playbook_create_seas_deployer11_run_capistrano_sidekiq.yml
# Run capistrano on the cap_deployer box to setup  sidekiq reports
- import_playbook: playbook_create_seas_deployer12_run_capistrano_sidekiq_reports.yml

# TURN OFF AUTOSCALING
#######- import_playbook: playbook_create_seas_deployer12_turn_on_autoscaling.yml



# TODO
# sidetiq
#
# encrypt
# dynamic inventory: https://docs.ansible.com/ansible/2.5/user_guide/intro_dynamic_inventory.html
# deploy to staging AND production
# deploy deploy branch to staging and MASTER to production
# SKIP: is jenkins handling the merge of develop to master before deploy
# docker containers for all this
# STAGING not behind vpn so elbas / asg issues
# tag gems with production and staging 
# when we deploy staging, we do a sidekiq deploy to the sidekiq staging instance and the production sidekiq instance
# whatever exists in dockertools is gracefully spinning down the sidekiq instances, updating the sidekiq instances w/ the new code, give them enough time to gracefully shut down
# how handle ssh keys for all users that want to log into the server
# means to add, remove, update ssh credentials for a user w/o having to do a deploy
#. authorized_keys
#. ansible tools which copy them up
#  user accounts for each user
#  someone 
# is sidekiq on ASG
# utility: verify that codebase is the same on all nodes
# merge to master has to come in via ansible
# copy ssh keys into apps???? (joseph issue)

# 1 git repo of ansible stuff for all deployment and user management
# is this 2 git repos of ansible
  # deployer
  # user_mgmt

# sidekiq 

# figuring out if sidekiq is right and/or correcting it

# look into if we can remove this entirely
# uid: 1040


# Known Issues
# template error while templating string: no filter named 'map' on rbenv is covered 
# https://github.com/ansible/ansible/issues/24439
